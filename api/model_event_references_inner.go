/*
Track & Trace Events

Retrieve Track & Trace Events based on DCSA Interface standard v.2.2  This service provides shippers and consignees visibility to Shipment, Equipment and Transport events for shipments booked with A.P. Moller-Maersk A/S using standards set by the Digital Container Shipping Association.\\ <https://dcsa.org/> 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// EventReferencesInner struct for EventReferencesInner
type EventReferencesInner struct {
	// The reference type codes defined by DCSA. * FF (Freight Forwarder’s Reference) * SI (Shipper’s Reference) * PO (Purchase Order Reference) * CR (Customer’s Reference) * AAO (Consignee’s Reference) * EQ (Equipment Reference) 
	ReferenceType string `json:"referenceType"`
	// The actual value of the reference.
	ReferenceValue string `json:"referenceValue"`
}

// NewEventReferencesInner instantiates a new EventReferencesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventReferencesInner(referenceType string, referenceValue string) *EventReferencesInner {
	this := EventReferencesInner{}
	this.ReferenceType = referenceType
	this.ReferenceValue = referenceValue
	return &this
}

// NewEventReferencesInnerWithDefaults instantiates a new EventReferencesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventReferencesInnerWithDefaults() *EventReferencesInner {
	this := EventReferencesInner{}
	return &this
}

// GetReferenceType returns the ReferenceType field value
func (o *EventReferencesInner) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *EventReferencesInner) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *EventReferencesInner) SetReferenceType(v string) {
	o.ReferenceType = v
}

// GetReferenceValue returns the ReferenceValue field value
func (o *EventReferencesInner) GetReferenceValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceValue
}

// GetReferenceValueOk returns a tuple with the ReferenceValue field value
// and a boolean to check if the value has been set.
func (o *EventReferencesInner) GetReferenceValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceValue, true
}

// SetReferenceValue sets field value
func (o *EventReferencesInner) SetReferenceValue(v string) {
	o.ReferenceValue = v
}

func (o EventReferencesInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["referenceType"] = o.ReferenceType
	}
	if true {
		toSerialize["referenceValue"] = o.ReferenceValue
	}
	return json.Marshal(toSerialize)
}

type NullableEventReferencesInner struct {
	value *EventReferencesInner
	isSet bool
}

func (v NullableEventReferencesInner) Get() *EventReferencesInner {
	return v.value
}

func (v *NullableEventReferencesInner) Set(val *EventReferencesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEventReferencesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEventReferencesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventReferencesInner(val *EventReferencesInner) *NullableEventReferencesInner {
	return &NullableEventReferencesInner{value: val, isSet: true}
}

func (v NullableEventReferencesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventReferencesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


