/*
Track & Trace Events

Retrieve Track & Trace Events based on DCSA Interface standard v.2.2  This service provides shippers and consignees visibility to Shipment, Equipment and Transport events for shipments booked with A.P. Moller-Maersk A/S using standards set by the Digital Container Shipping Association.\\ <https://dcsa.org/>

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ShipmentEventAllOf struct for ShipmentEventAllOf
type ShipmentEventAllOf struct {
	EventType *string `json:"eventType,omitempty"`
	// The status of the document in the process. Possible values are - RECE (Received) - DRFT (Drafted) - PENA (Pending Approval) - PENU (Pending Update) - REJE (Rejected) - APPR (Approved) - ISSU (Issued) - SURR (Surrendered) - SUBM (Submitted) - VOID (Void) - CONF (Confirmed) - REQS (Requested) - CMPL (Completed) - HOLD (On Hold) - RELS (Released)  Note: Version 1.1 replaces CONF (Confirmed) for RELS (Released) for documentTypeCode SRM (Shipment Release Message).
	ShipmentEventTypeCode string `json:"shipmentEventTypeCode"`
	// The code to identify the type of information documentID points to. Can be one of the following values * CBR (Carrier Booking Request Reference) * BKG (Booking) * SHI (Shipping Instruction) * SRM (Shipment Release Message) * TRD (Transport Document) * ARN (Arrival Notice) * VGM (Verified Gross Mass) * CAS (Cargo Survey) * CUS (Customs Inspection) * DGD (Dangerous Goods Declaration) * OOG (Out of Gauge)
	DocumentTypeCode string `json:"documentTypeCode"`
	// The ID of the object defined by the Shipment Information Type. In some cases this is a UUID; in other cases this is a string.
	DocumentID string `json:"documentID"`
	// Reason field in a Shipment event. This field can be used to explain why a specific event has been sent.
	Reason *string `json:"reason,omitempty"`
}

// NewShipmentEventAllOf instantiates a new ShipmentEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShipmentEventAllOf(shipmentEventTypeCode string, documentTypeCode string, documentID string) *ShipmentEventAllOf {
	this := ShipmentEventAllOf{}
	this.ShipmentEventTypeCode = shipmentEventTypeCode
	this.DocumentTypeCode = documentTypeCode
	this.DocumentID = documentID
	return &this
}

// NewShipmentEventAllOfWithDefaults instantiates a new ShipmentEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShipmentEventAllOfWithDefaults() *ShipmentEventAllOf {
	this := ShipmentEventAllOf{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *ShipmentEventAllOf) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentEventAllOf) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *ShipmentEventAllOf) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *ShipmentEventAllOf) SetEventType(v string) {
	o.EventType = &v
}

// GetShipmentEventTypeCode returns the ShipmentEventTypeCode field value
func (o *ShipmentEventAllOf) GetShipmentEventTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShipmentEventTypeCode
}

// GetShipmentEventTypeCodeOk returns a tuple with the ShipmentEventTypeCode field value
// and a boolean to check if the value has been set.
func (o *ShipmentEventAllOf) GetShipmentEventTypeCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShipmentEventTypeCode, true
}

// SetShipmentEventTypeCode sets field value
func (o *ShipmentEventAllOf) SetShipmentEventTypeCode(v string) {
	o.ShipmentEventTypeCode = v
}

// GetDocumentTypeCode returns the DocumentTypeCode field value
func (o *ShipmentEventAllOf) GetDocumentTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentTypeCode
}

// GetDocumentTypeCodeOk returns a tuple with the DocumentTypeCode field value
// and a boolean to check if the value has been set.
func (o *ShipmentEventAllOf) GetDocumentTypeCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentTypeCode, true
}

// SetDocumentTypeCode sets field value
func (o *ShipmentEventAllOf) SetDocumentTypeCode(v string) {
	o.DocumentTypeCode = v
}

// GetDocumentID returns the DocumentID field value
func (o *ShipmentEventAllOf) GetDocumentID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentID
}

// GetDocumentIDOk returns a tuple with the DocumentID field value
// and a boolean to check if the value has been set.
func (o *ShipmentEventAllOf) GetDocumentIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentID, true
}

// SetDocumentID sets field value
func (o *ShipmentEventAllOf) SetDocumentID(v string) {
	o.DocumentID = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ShipmentEventAllOf) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentEventAllOf) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ShipmentEventAllOf) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ShipmentEventAllOf) SetReason(v string) {
	o.Reason = &v
}

func (o ShipmentEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["shipmentEventTypeCode"] = o.ShipmentEventTypeCode
	}
	if true {
		toSerialize["documentTypeCode"] = o.DocumentTypeCode
	}
	if true {
		toSerialize["documentID"] = o.DocumentID
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableShipmentEventAllOf struct {
	value *ShipmentEventAllOf
	isSet bool
}

func (v NullableShipmentEventAllOf) Get() *ShipmentEventAllOf {
	return v.value
}

func (v *NullableShipmentEventAllOf) Set(val *ShipmentEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentEventAllOf(val *ShipmentEventAllOf) *NullableShipmentEventAllOf {
	return &NullableShipmentEventAllOf{value: val, isSet: true}
}

func (v NullableShipmentEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
