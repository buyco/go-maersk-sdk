/*
Track & Trace Events

Retrieve Track & Trace Events based on DCSA Interface standard v.2.2  This service provides shippers and consignees visibility to Shipment, Equipment and Transport events for shipments booked with A.P. Moller-Maersk A/S using standards set by the Digital Container Shipping Association.\\ <https://dcsa.org/> 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maersk

import (
	"encoding/json"
)

// TransportEventAllOf1 struct for TransportEventAllOf1
type TransportEventAllOf1 struct {
	TransportCall TransportCall `json:"transportCall"`
}

// NewTransportEventAllOf1 instantiates a new TransportEventAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportEventAllOf1(transportCall TransportCall) *TransportEventAllOf1 {
	this := TransportEventAllOf1{}
	this.TransportCall = transportCall
	return &this
}

// NewTransportEventAllOf1WithDefaults instantiates a new TransportEventAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportEventAllOf1WithDefaults() *TransportEventAllOf1 {
	this := TransportEventAllOf1{}
	return &this
}

// GetTransportCall returns the TransportCall field value
func (o *TransportEventAllOf1) GetTransportCall() TransportCall {
	if o == nil {
		var ret TransportCall
		return ret
	}

	return o.TransportCall
}

// GetTransportCallOk returns a tuple with the TransportCall field value
// and a boolean to check if the value has been set.
func (o *TransportEventAllOf1) GetTransportCallOk() (*TransportCall, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportCall, true
}

// SetTransportCall sets field value
func (o *TransportEventAllOf1) SetTransportCall(v TransportCall) {
	o.TransportCall = v
}

func (o TransportEventAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["transportCall"] = o.TransportCall
	}
	return json.Marshal(toSerialize)
}

type NullableTransportEventAllOf1 struct {
	value *TransportEventAllOf1
	isSet bool
}

func (v NullableTransportEventAllOf1) Get() *TransportEventAllOf1 {
	return v.value
}

func (v *NullableTransportEventAllOf1) Set(val *TransportEventAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportEventAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportEventAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportEventAllOf1(val *TransportEventAllOf1) *NullableTransportEventAllOf1 {
	return &NullableTransportEventAllOf1{value: val, isSet: true}
}

func (v NullableTransportEventAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportEventAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


