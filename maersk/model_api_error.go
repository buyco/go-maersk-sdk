/*
Track & Trace Events

Retrieve Track & Trace Events based on DCSA Interface standard v.2.2  This service provides shippers and consignees visibility to Shipment, Equipment and Transport events for shipments booked with A.P. Moller-Maersk A/S using standards set by the Digital Container Shipping Association.\\ <https://dcsa.org/>

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maersk

import (
	"encoding/json"
)

// ApiError struct for ApiError
type ApiError struct {
	// The request method type e.g. GET, POST.
	Method string `json:"method"`
	// The request URI.
	RequestUri string `json:"requestUri"`
	// The textual representation of the response status.
	Status string `json:"status"`
	// The date and time (dd-MM-yyyy hh:mm:ss) the error occured.
	Timestamp string `json:"timestamp"`
	// High level error message.
	Message string `json:"message"`
	// Detailed error message.
	DebugMessage string `json:"debugMessage"`
	// The list of invalid fields in the request.
	SubErrors []ApiValidationError `json:"subErrors,omitempty"`
}

// NewApiError instantiates a new ApiError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiError(method string, requestUri string, status string, timestamp string, message string, debugMessage string) *ApiError {
	this := ApiError{}
	this.Method = method
	this.RequestUri = requestUri
	this.Status = status
	this.Timestamp = timestamp
	this.Message = message
	this.DebugMessage = debugMessage
	return &this
}

// NewApiErrorWithDefaults instantiates a new ApiError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiErrorWithDefaults() *ApiError {
	this := ApiError{}
	return &this
}

// GetMethod returns the Method field value
func (o *ApiError) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *ApiError) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *ApiError) SetMethod(v string) {
	o.Method = v
}

// GetRequestUri returns the RequestUri field value
func (o *ApiError) GetRequestUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestUri
}

// GetRequestUriOk returns a tuple with the RequestUri field value
// and a boolean to check if the value has been set.
func (o *ApiError) GetRequestUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestUri, true
}

// SetRequestUri sets field value
func (o *ApiError) SetRequestUri(v string) {
	o.RequestUri = v
}

// GetStatus returns the Status field value
func (o *ApiError) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ApiError) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ApiError) SetStatus(v string) {
	o.Status = v
}

// GetTimestamp returns the Timestamp field value
func (o *ApiError) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ApiError) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ApiError) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetMessage returns the Message field value
func (o *ApiError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ApiError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ApiError) SetMessage(v string) {
	o.Message = v
}

// GetDebugMessage returns the DebugMessage field value
func (o *ApiError) GetDebugMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DebugMessage
}

// GetDebugMessageOk returns a tuple with the DebugMessage field value
// and a boolean to check if the value has been set.
func (o *ApiError) GetDebugMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DebugMessage, true
}

// SetDebugMessage sets field value
func (o *ApiError) SetDebugMessage(v string) {
	o.DebugMessage = v
}

// GetSubErrors returns the SubErrors field value if set, zero value otherwise.
func (o *ApiError) GetSubErrors() []ApiValidationError {
	if o == nil || o.SubErrors == nil {
		var ret []ApiValidationError
		return ret
	}
	return o.SubErrors
}

// GetSubErrorsOk returns a tuple with the SubErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiError) GetSubErrorsOk() ([]ApiValidationError, bool) {
	if o == nil || o.SubErrors == nil {
		return nil, false
	}
	return o.SubErrors, true
}

// HasSubErrors returns a boolean if a field has been set.
func (o *ApiError) HasSubErrors() bool {
	if o != nil && o.SubErrors != nil {
		return true
	}

	return false
}

// SetSubErrors gets a reference to the given []ApiValidationError and assigns it to the SubErrors field.
func (o *ApiError) SetSubErrors(v []ApiValidationError) {
	o.SubErrors = v
}

func (o ApiError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["method"] = o.Method
	}
	if true {
		toSerialize["requestUri"] = o.RequestUri
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["debugMessage"] = o.DebugMessage
	}
	if o.SubErrors != nil {
		toSerialize["subErrors"] = o.SubErrors
	}
	return json.Marshal(toSerialize)
}

type NullableApiError struct {
	value *ApiError
	isSet bool
}

func (v NullableApiError) Get() *ApiError {
	return v.value
}

func (v *NullableApiError) Set(val *ApiError) {
	v.value = val
	v.isSet = true
}

func (v NullableApiError) IsSet() bool {
	return v.isSet
}

func (v *NullableApiError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiError(val *ApiError) *NullableApiError {
	return &NullableApiError{value: val, isSet: true}
}

func (v NullableApiError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
