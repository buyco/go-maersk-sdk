/*
Track & Trace Events

Retrieve Track & Trace Events based on DCSA Interface standard v.2.2  This service provides shippers and consignees visibility to Shipment, Equipment and Transport events for shipments booked with A.P. Moller-Maersk A/S using standards set by the Digital Container Shipping Association.\\ <https://dcsa.org/> 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maersk

import (
	"encoding/json"
)

// EquipmentEventAllOf struct for EquipmentEventAllOf
type EquipmentEventAllOf struct {
	EventType *string `json:"eventType,omitempty"`
	// Unique identifier for equipmentEventTypeCode. * LOAD (Loaded) * DISC (Discharged) * GTIN (Gated in) * GTOT (Gated out) * STUF (Stuffed) * STRP (Stripped) * PICK (Pick-up) * DROP (Drop-off) * RSEA (Resealed) * RMVD (Removed) * INSP (Inspected) 
	EquipmentEventTypeCode *string `json:"equipmentEventTypeCode,omitempty"`
	// The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. According to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 “Container with non-ISO identification” from SMDG. 
	EquipmentReference *string `json:"equipmentReference,omitempty"`
	// Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.
	ISOEquipmentCode *string `json:"ISOEquipmentCode,omitempty"`
	// Code to denote whether the equipment is empty or laden.
	EmptyIndicatorCode string `json:"emptyIndicatorCode"`
	// An optional list of key-value (documentReferenceType-documentReferenceValue) pairs representing links to objects relevant to the event. The documentReferenceType-field is used to describe where the documentReferenceValue-field is pointing to.
	DocumentReferences []DocumentReferencesInner `json:"documentReferences,omitempty"`
	EventLocation *Location `json:"eventLocation,omitempty"`
	TransportCall *TransportCall `json:"transportCall,omitempty"`
}

// NewEquipmentEventAllOf instantiates a new EquipmentEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipmentEventAllOf(emptyIndicatorCode string) *EquipmentEventAllOf {
	this := EquipmentEventAllOf{}
	this.EmptyIndicatorCode = emptyIndicatorCode
	return &this
}

// NewEquipmentEventAllOfWithDefaults instantiates a new EquipmentEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentEventAllOfWithDefaults() *EquipmentEventAllOf {
	this := EquipmentEventAllOf{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *EquipmentEventAllOf) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *EquipmentEventAllOf) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *EquipmentEventAllOf) SetEventType(v string) {
	o.EventType = &v
}

// GetEquipmentEventTypeCode returns the EquipmentEventTypeCode field value if set, zero value otherwise.
func (o *EquipmentEventAllOf) GetEquipmentEventTypeCode() string {
	if o == nil || o.EquipmentEventTypeCode == nil {
		var ret string
		return ret
	}
	return *o.EquipmentEventTypeCode
}

// GetEquipmentEventTypeCodeOk returns a tuple with the EquipmentEventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetEquipmentEventTypeCodeOk() (*string, bool) {
	if o == nil || o.EquipmentEventTypeCode == nil {
		return nil, false
	}
	return o.EquipmentEventTypeCode, true
}

// HasEquipmentEventTypeCode returns a boolean if a field has been set.
func (o *EquipmentEventAllOf) HasEquipmentEventTypeCode() bool {
	if o != nil && o.EquipmentEventTypeCode != nil {
		return true
	}

	return false
}

// SetEquipmentEventTypeCode gets a reference to the given string and assigns it to the EquipmentEventTypeCode field.
func (o *EquipmentEventAllOf) SetEquipmentEventTypeCode(v string) {
	o.EquipmentEventTypeCode = &v
}

// GetEquipmentReference returns the EquipmentReference field value if set, zero value otherwise.
func (o *EquipmentEventAllOf) GetEquipmentReference() string {
	if o == nil || o.EquipmentReference == nil {
		var ret string
		return ret
	}
	return *o.EquipmentReference
}

// GetEquipmentReferenceOk returns a tuple with the EquipmentReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetEquipmentReferenceOk() (*string, bool) {
	if o == nil || o.EquipmentReference == nil {
		return nil, false
	}
	return o.EquipmentReference, true
}

// HasEquipmentReference returns a boolean if a field has been set.
func (o *EquipmentEventAllOf) HasEquipmentReference() bool {
	if o != nil && o.EquipmentReference != nil {
		return true
	}

	return false
}

// SetEquipmentReference gets a reference to the given string and assigns it to the EquipmentReference field.
func (o *EquipmentEventAllOf) SetEquipmentReference(v string) {
	o.EquipmentReference = &v
}

// GetISOEquipmentCode returns the ISOEquipmentCode field value if set, zero value otherwise.
func (o *EquipmentEventAllOf) GetISOEquipmentCode() string {
	if o == nil || o.ISOEquipmentCode == nil {
		var ret string
		return ret
	}
	return *o.ISOEquipmentCode
}

// GetISOEquipmentCodeOk returns a tuple with the ISOEquipmentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetISOEquipmentCodeOk() (*string, bool) {
	if o == nil || o.ISOEquipmentCode == nil {
		return nil, false
	}
	return o.ISOEquipmentCode, true
}

// HasISOEquipmentCode returns a boolean if a field has been set.
func (o *EquipmentEventAllOf) HasISOEquipmentCode() bool {
	if o != nil && o.ISOEquipmentCode != nil {
		return true
	}

	return false
}

// SetISOEquipmentCode gets a reference to the given string and assigns it to the ISOEquipmentCode field.
func (o *EquipmentEventAllOf) SetISOEquipmentCode(v string) {
	o.ISOEquipmentCode = &v
}

// GetEmptyIndicatorCode returns the EmptyIndicatorCode field value
func (o *EquipmentEventAllOf) GetEmptyIndicatorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmptyIndicatorCode
}

// GetEmptyIndicatorCodeOk returns a tuple with the EmptyIndicatorCode field value
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetEmptyIndicatorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmptyIndicatorCode, true
}

// SetEmptyIndicatorCode sets field value
func (o *EquipmentEventAllOf) SetEmptyIndicatorCode(v string) {
	o.EmptyIndicatorCode = v
}

// GetDocumentReferences returns the DocumentReferences field value if set, zero value otherwise.
func (o *EquipmentEventAllOf) GetDocumentReferences() []DocumentReferencesInner {
	if o == nil || o.DocumentReferences == nil {
		var ret []DocumentReferencesInner
		return ret
	}
	return o.DocumentReferences
}

// GetDocumentReferencesOk returns a tuple with the DocumentReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetDocumentReferencesOk() ([]DocumentReferencesInner, bool) {
	if o == nil || o.DocumentReferences == nil {
		return nil, false
	}
	return o.DocumentReferences, true
}

// HasDocumentReferences returns a boolean if a field has been set.
func (o *EquipmentEventAllOf) HasDocumentReferences() bool {
	if o != nil && o.DocumentReferences != nil {
		return true
	}

	return false
}

// SetDocumentReferences gets a reference to the given []DocumentReferencesInner and assigns it to the DocumentReferences field.
func (o *EquipmentEventAllOf) SetDocumentReferences(v []DocumentReferencesInner) {
	o.DocumentReferences = v
}

// GetEventLocation returns the EventLocation field value if set, zero value otherwise.
func (o *EquipmentEventAllOf) GetEventLocation() Location {
	if o == nil || o.EventLocation == nil {
		var ret Location
		return ret
	}
	return *o.EventLocation
}

// GetEventLocationOk returns a tuple with the EventLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetEventLocationOk() (*Location, bool) {
	if o == nil || o.EventLocation == nil {
		return nil, false
	}
	return o.EventLocation, true
}

// HasEventLocation returns a boolean if a field has been set.
func (o *EquipmentEventAllOf) HasEventLocation() bool {
	if o != nil && o.EventLocation != nil {
		return true
	}

	return false
}

// SetEventLocation gets a reference to the given Location and assigns it to the EventLocation field.
func (o *EquipmentEventAllOf) SetEventLocation(v Location) {
	o.EventLocation = &v
}

// GetTransportCall returns the TransportCall field value if set, zero value otherwise.
func (o *EquipmentEventAllOf) GetTransportCall() TransportCall {
	if o == nil || o.TransportCall == nil {
		var ret TransportCall
		return ret
	}
	return *o.TransportCall
}

// GetTransportCallOk returns a tuple with the TransportCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetTransportCallOk() (*TransportCall, bool) {
	if o == nil || o.TransportCall == nil {
		return nil, false
	}
	return o.TransportCall, true
}

// HasTransportCall returns a boolean if a field has been set.
func (o *EquipmentEventAllOf) HasTransportCall() bool {
	if o != nil && o.TransportCall != nil {
		return true
	}

	return false
}

// SetTransportCall gets a reference to the given TransportCall and assigns it to the TransportCall field.
func (o *EquipmentEventAllOf) SetTransportCall(v TransportCall) {
	o.TransportCall = &v
}

func (o EquipmentEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	if o.EquipmentEventTypeCode != nil {
		toSerialize["equipmentEventTypeCode"] = o.EquipmentEventTypeCode
	}
	if o.EquipmentReference != nil {
		toSerialize["equipmentReference"] = o.EquipmentReference
	}
	if o.ISOEquipmentCode != nil {
		toSerialize["ISOEquipmentCode"] = o.ISOEquipmentCode
	}
	if true {
		toSerialize["emptyIndicatorCode"] = o.EmptyIndicatorCode
	}
	if o.DocumentReferences != nil {
		toSerialize["documentReferences"] = o.DocumentReferences
	}
	if o.EventLocation != nil {
		toSerialize["eventLocation"] = o.EventLocation
	}
	if o.TransportCall != nil {
		toSerialize["transportCall"] = o.TransportCall
	}
	return json.Marshal(toSerialize)
}

type NullableEquipmentEventAllOf struct {
	value *EquipmentEventAllOf
	isSet bool
}

func (v NullableEquipmentEventAllOf) Get() *EquipmentEventAllOf {
	return v.value
}

func (v *NullableEquipmentEventAllOf) Set(val *EquipmentEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentEventAllOf(val *EquipmentEventAllOf) *NullableEquipmentEventAllOf {
	return &NullableEquipmentEventAllOf{value: val, isSet: true}
}

func (v NullableEquipmentEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


