/*
Track & Trace Events

Retrieve Track & Trace Events based on DCSA Interface standard v.2.2  This service provides shippers and consignees visibility to Shipment, Equipment and Transport events for shipments booked with A.P. Moller-Maersk A/S using standards set by the Digital Container Shipping Association.\\ <https://dcsa.org/>

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maersk

import (
	"encoding/json"
)

// TransportEventAllOf struct for TransportEventAllOf
type TransportEventAllOf struct {
	EventType *string `json:"eventType,omitempty"`
	// Identifier for type of Transport event - ARRI (Arrived) - DEPA (Departed)
	TransportEventTypeCode *string `json:"transportEventTypeCode,omitempty"`
	// Reason code for the delay. The SMDG-Delay-Reason-Codes are used for this attribute. The code list can be found at http://www.smdg.org/smdg-code-lists/
	DelayReasonCode *string `json:"delayReasonCode,omitempty"`
	// Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.
	ChangeRemark *string `json:"changeRemark,omitempty"`
	// An optional list of key-value (documentReferenceType-documentReferenceValue) pairs representing links to objects relevant to the event. The documentReferenceType-field is used to describe where the documentReferenceValue-field is pointing to.
	DocumentReferences []DocumentReferencesInner `json:"documentReferences,omitempty"`
}

// NewTransportEventAllOf instantiates a new TransportEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportEventAllOf() *TransportEventAllOf {
	this := TransportEventAllOf{}
	return &this
}

// NewTransportEventAllOfWithDefaults instantiates a new TransportEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportEventAllOfWithDefaults() *TransportEventAllOf {
	this := TransportEventAllOf{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *TransportEventAllOf) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportEventAllOf) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *TransportEventAllOf) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *TransportEventAllOf) SetEventType(v string) {
	o.EventType = &v
}

// GetTransportEventTypeCode returns the TransportEventTypeCode field value if set, zero value otherwise.
func (o *TransportEventAllOf) GetTransportEventTypeCode() string {
	if o == nil || o.TransportEventTypeCode == nil {
		var ret string
		return ret
	}
	return *o.TransportEventTypeCode
}

// GetTransportEventTypeCodeOk returns a tuple with the TransportEventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportEventAllOf) GetTransportEventTypeCodeOk() (*string, bool) {
	if o == nil || o.TransportEventTypeCode == nil {
		return nil, false
	}
	return o.TransportEventTypeCode, true
}

// HasTransportEventTypeCode returns a boolean if a field has been set.
func (o *TransportEventAllOf) HasTransportEventTypeCode() bool {
	if o != nil && o.TransportEventTypeCode != nil {
		return true
	}

	return false
}

// SetTransportEventTypeCode gets a reference to the given string and assigns it to the TransportEventTypeCode field.
func (o *TransportEventAllOf) SetTransportEventTypeCode(v string) {
	o.TransportEventTypeCode = &v
}

// GetDelayReasonCode returns the DelayReasonCode field value if set, zero value otherwise.
func (o *TransportEventAllOf) GetDelayReasonCode() string {
	if o == nil || o.DelayReasonCode == nil {
		var ret string
		return ret
	}
	return *o.DelayReasonCode
}

// GetDelayReasonCodeOk returns a tuple with the DelayReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportEventAllOf) GetDelayReasonCodeOk() (*string, bool) {
	if o == nil || o.DelayReasonCode == nil {
		return nil, false
	}
	return o.DelayReasonCode, true
}

// HasDelayReasonCode returns a boolean if a field has been set.
func (o *TransportEventAllOf) HasDelayReasonCode() bool {
	if o != nil && o.DelayReasonCode != nil {
		return true
	}

	return false
}

// SetDelayReasonCode gets a reference to the given string and assigns it to the DelayReasonCode field.
func (o *TransportEventAllOf) SetDelayReasonCode(v string) {
	o.DelayReasonCode = &v
}

// GetChangeRemark returns the ChangeRemark field value if set, zero value otherwise.
func (o *TransportEventAllOf) GetChangeRemark() string {
	if o == nil || o.ChangeRemark == nil {
		var ret string
		return ret
	}
	return *o.ChangeRemark
}

// GetChangeRemarkOk returns a tuple with the ChangeRemark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportEventAllOf) GetChangeRemarkOk() (*string, bool) {
	if o == nil || o.ChangeRemark == nil {
		return nil, false
	}
	return o.ChangeRemark, true
}

// HasChangeRemark returns a boolean if a field has been set.
func (o *TransportEventAllOf) HasChangeRemark() bool {
	if o != nil && o.ChangeRemark != nil {
		return true
	}

	return false
}

// SetChangeRemark gets a reference to the given string and assigns it to the ChangeRemark field.
func (o *TransportEventAllOf) SetChangeRemark(v string) {
	o.ChangeRemark = &v
}

// GetDocumentReferences returns the DocumentReferences field value if set, zero value otherwise.
func (o *TransportEventAllOf) GetDocumentReferences() []DocumentReferencesInner {
	if o == nil || o.DocumentReferences == nil {
		var ret []DocumentReferencesInner
		return ret
	}
	return o.DocumentReferences
}

// GetDocumentReferencesOk returns a tuple with the DocumentReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportEventAllOf) GetDocumentReferencesOk() ([]DocumentReferencesInner, bool) {
	if o == nil || o.DocumentReferences == nil {
		return nil, false
	}
	return o.DocumentReferences, true
}

// HasDocumentReferences returns a boolean if a field has been set.
func (o *TransportEventAllOf) HasDocumentReferences() bool {
	if o != nil && o.DocumentReferences != nil {
		return true
	}

	return false
}

// SetDocumentReferences gets a reference to the given []DocumentReferencesInner and assigns it to the DocumentReferences field.
func (o *TransportEventAllOf) SetDocumentReferences(v []DocumentReferencesInner) {
	o.DocumentReferences = v
}

func (o TransportEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	if o.TransportEventTypeCode != nil {
		toSerialize["transportEventTypeCode"] = o.TransportEventTypeCode
	}
	if o.DelayReasonCode != nil {
		toSerialize["delayReasonCode"] = o.DelayReasonCode
	}
	if o.ChangeRemark != nil {
		toSerialize["changeRemark"] = o.ChangeRemark
	}
	if o.DocumentReferences != nil {
		toSerialize["documentReferences"] = o.DocumentReferences
	}
	return json.Marshal(toSerialize)
}

type NullableTransportEventAllOf struct {
	value *TransportEventAllOf
	isSet bool
}

func (v NullableTransportEventAllOf) Get() *TransportEventAllOf {
	return v.value
}

func (v *NullableTransportEventAllOf) Set(val *TransportEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportEventAllOf(val *TransportEventAllOf) *NullableTransportEventAllOf {
	return &NullableTransportEventAllOf{value: val, isSet: true}
}

func (v NullableTransportEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
